{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Maestro_le6\\\\Documents\\\\BeeChatapp\\\\client\\\\src\\\\pages\\\\home\\\\components\\\\chatArea.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createNewMessage, getAllMessage } from '../../../apiCalls/message';\nimport { hideLoader, showLoader } from \"../../../redux/loaderSlice\";\nimport { clearunreadMessagecount } from '../../../apiCalls/chat';\nimport store from '../../../redux/store';\nimport EmojiPicker from 'emoji-picker-react';\nimport moment from 'moment';\nimport { setAllChats } from \"../../../redux/usersSlice\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ChatArea({\n  socket\n}) {\n  _s();\n  var _selectedChats$member;\n  const dispatch = useDispatch();\n  const {\n    selectedChats,\n    user,\n    allChats\n  } = useSelector(state => state.userReducer);\n  const selectedUser = selectedChats === null || selectedChats === void 0 ? void 0 : (_selectedChats$member = selectedChats.members) === null || _selectedChats$member === void 0 ? void 0 : _selectedChats$member.find(us => (us === null || us === void 0 ? void 0 : us._id) !== (user === null || user === void 0 ? void 0 : user._id));\n  const [message, setMessage] = useState('');\n  const [allMessages, setAllMessages] = useState([]);\n  const [isTyping, setIsTyping] = useState(false);\n  const [showEmojiPicker, setshowEmojiPicker] = useState(false);\n  const [data, setData] = useState(null);\n\n  // Function to send a new message\n  /// and also images which was modified the image will be passed as parameter\n  const sendMessage = async image => {\n    if (!message.trim() && !image) {\n      toast.error(\"Message cannot be empty!\");\n      return;\n    }\n    try {\n      const newMessage = {\n        chatId: selectedChats === null || selectedChats === void 0 ? void 0 : selectedChats._id,\n        sender: user === null || user === void 0 ? void 0 : user._id,\n        text: message,\n        image: image\n      };\n      socket.emit('send-message', {\n        ...newMessage,\n        members: selectedChats.members.map(m => m._id),\n        read: false,\n        createsAt: moment().format('DD-MM-YYYY hh:mm:ss')\n      });\n      const response = await createNewMessage(newMessage);\n      if (response.success) {\n        setMessage('');\n        getMessages(); // Refresh messages after sending\n      } else {\n        toast.error(\"Failed to send message!\");\n      }\n    } catch (error) {\n      dispatch(hideLoader());\n      toast.error(error.message || \"An error occurred!\");\n    }\n  };\n\n  // Function to format timestamps\n  const formatTime = timestamp => {\n    const now = moment();\n    const formattedTimestamp = moment(timestamp);\n    if (formattedTimestamp.isSame(now, 'day')) {\n      return `Today ${formattedTimestamp.format('hh:mm A')}`;\n    } else if (formattedTimestamp.isSame(now.clone().subtract(1, 'day'), 'day')) {\n      return `Yesterday ${formattedTimestamp.format('hh:mm A')}`;\n    } else {\n      return formattedTimestamp.format('MMMM D, YYYY hh:mm A');\n    }\n  };\n\n  // Function to fetch all messages\n  const getMessages = async () => {\n    if (!(selectedChats !== null && selectedChats !== void 0 && selectedChats._id)) return;\n    try {\n      const response = await getAllMessage(selectedChats._id);\n      if (response.success) {\n        setAllMessages(response.data);\n      } else {\n        toast.error(\"Failed to fetch messages!\");\n      }\n    } catch (error) {\n      dispatch(hideLoader());\n      toast.error(error.message || \"An error occurred!\");\n    }\n  };\n\n  ///// Clearing the UnreadMessage Count\n  const ClearedUnreadMessages = async () => {\n    if (!(selectedChats !== null && selectedChats !== void 0 && selectedChats._id)) return;\n    try {\n      socket.emit('clear-unread-messages', {\n        chatId: selectedChats._id,\n        members: selectedChats.members.map(m => m._id)\n      });\n      const response = await clearunreadMessagecount(selectedChats._id);\n      if (response.success) {\n        allChats.map(chat => {\n          //// checking if the selectedChat matches the ID.\n          if (chat._id === selectedChats._id) {\n            toast.success(response.message);\n            return response.data;\n          }\n          return chat; /// just return the chat without changing anything\n        });\n      } else {\n        toast.error(\"Failed to fetch messages!\");\n      }\n    } catch (error) {\n      toast.error(error.message || \"An error occurred!\");\n    }\n  };\n  //// To send Image\n  const sendImage = async e => {\n    const file = e.target.files[0];\n    const reader = new FileReader(file);\n    reader.readAsDataURL(file);\n    reader.onloadend = async () => {\n      sendMessage(reader.result);\n    };\n  };\n\n  // Format the selected user's full name\n  const FormatName = user => {\n    if (!(user !== null && user !== void 0 && user.firstname) || !(user !== null && user !== void 0 && user.lastname)) return \"Unknown User\";\n    const fname = user.firstname[0].toUpperCase() + user.firstname.slice(1).toLowerCase();\n    const lname = user.lastname[0].toUpperCase() + user.lastname.slice(1).toLowerCase();\n    return `${fname} ${lname}`;\n  };\n\n  // Effect to fetch messages when selectedChats changes\n  useEffect(() => {\n    var _selectedChats$lastMe;\n    getMessages();\n    if (selectedChats !== null && selectedChats !== void 0 && (_selectedChats$lastMe = selectedChats.lastMessage) !== null && _selectedChats$lastMe !== void 0 && _selectedChats$lastMe.sender && selectedChats.lastMessage.sender !== user._id) {\n      ClearedUnreadMessages();\n    } // here we want the unread message cleared when the reciever recieves it.\n    //// listening to the receive-message event\n    socket.on('receive-message', message => {\n      const selectedChats = store.getState().userReducer.selectedChats;\n      if ((selectedChats === null || selectedChats === void 0 ? void 0 : selectedChats._id) === message.chatId) {\n        setAllMessages(prevmsg => [...prevmsg, message]);\n      } else if ((selectedChats === null || selectedChats === void 0 ? void 0 : selectedChats._id) === message.chatId && message.sender !== user._id) {\n        clearunreadMessagecount();\n      }\n      socket.on('message-count-cleared', data => {\n        const selectedChats = store.getState().userReducer.selectedChats;\n        const allChats = store.getState().userReducer.allChats;\n        /// checking of the selectedChat matches the incoming chat array stord in the data variable.\n        if (selectedChats._id === data.chatId) {\n          //// updating the unread message count\n          const updatedchat = allChats.map(chat => {\n            if (chat._id === data.chatId) {\n              return {\n                ...chat,\n                unreadMessageCount: 0\n              };\n            }\n            return chat;\n          });\n          dispatch(setAllChats(updatedchat));\n          ////// Updating the read property in the message Object.\n          setAllMessages(prevmsg => {\n            return prevmsg.map(msg => {\n              return {\n                ...msg,\n                read: true\n              };\n            });\n          });\n        }\n      });\n    });\n\n    /// handling the started typing\n    socket.on('started-typing', data => {\n      if (selectedChats._id === data.chatId && data.sender !== user._id) {\n        setIsTyping(true);\n        setTimeout(() => {\n          setIsTyping(false);\n        }, 3000);\n      }\n    });\n  }, [selectedChats]);\n  /// creating an automatic scroll effect.\n  useEffect(() => {\n    const msgController = document.getElementById('main-chat-area');\n    msgController.scrollTop = msgController.scrollHeight;\n  }, [allMessages]);\n\n  // Render the component\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: selectedChats ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-chat-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-chat-area-header\",\n        children: FormatName(selectedUser)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-chat-area\",\n        id: \"main-chat-area\",\n        children: allMessages === null || allMessages === void 0 ? void 0 : allMessages.map(msg => {\n          const isCurrentUserSender = msg.sender === (user === null || user === void 0 ? void 0 : user._id);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-container\",\n            style: isCurrentUserSender ? {\n              justifyContent: 'end'\n            } : {\n              justifyContent: 'start'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: isCurrentUserSender ? \"send-message\" : \"received-message\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  children: msg.text\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 218,\n                  columnNumber: 23\n                }, this), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\" \", msg.image && /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: msg.image,\n                  alt: \"image\",\n                  height: \"120\",\n                  width: \"120\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 221,\n                  columnNumber: 43\n                }, this), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"message-timestamps\",\n                style: isCurrentUserSender ? {\n                  float: 'right'\n                } : {\n                  float: 'left'\n                },\n                children: [formatTime(msg.createdAt), isCurrentUserSender && msg.read && /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"fa fa-check-circle\",\n                  \"aria-hidden\": \"true\",\n                  style: {\n                    color: '#4796ff'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 228,\n                  columnNumber: 59\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 19\n            }, this)\n          }, msg._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typing-indicate\",\n        children: isTyping && (selectedChats === null || selectedChats === void 0 ? void 0 : selectedChats.members.map(mi => mi._id).includes(data === null || data === void 0 ? void 0 : data.sender)) && /*#__PURE__*/_jsxDEV(\"i\", {\n          children: \"typing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 87\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 23\n      }, this), showEmojiPicker && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"send-message-wrapper\",\n        style: {\n          position: 'absolute',\n          bottom: '60px',\n          // Adjust height above input box\n          right: '80px',\n          zIndex: 1000,\n          boxShadow: '0 0 10px rgba(0,0,0,0.2)'\n        },\n        children: /*#__PURE__*/_jsxDEV(EmojiPicker, {\n          onEmojiClick: e => setMessage(message + e.emoji)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"send-message-div\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"send-message-input\",\n          placeholder: \"Type a message\",\n          value: message,\n          onChange: e => {\n            setMessage(e.target.value);\n            socket.emit('user-typing', {\n              chatId: selectedChats._id,\n              members: selectedChats.members.map(m => m._id),\n              sender: user._id // we are storing the id of the curremt sender\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"file\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-picture-o send-image-btn\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"file\",\n            style: {\n              display: 'none'\n            },\n            accept: \"image/jpg,image/jpeg,image/png,image/gif,image/webp\",\n            onChange: sendImage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 14\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"fa fa-smile-o send-emoji-btn\",\n          \"aria-hidden\": \"true\",\n          onClick: () => {\n            setshowEmojiPicker(!showEmojiPicker);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"fa fa-paper-plane send-message-btn\",\n          \"aria-hidden\": \"true\",\n          onClick: () => sendMessage('')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-chat-selected\",\n      children: \"Please select a chat to start messaging.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(ChatArea, \"SP6AkD79O5doITYObI/zs/eoiMs=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = ChatArea;\nexport default ChatArea;\nvar _c;\n$RefreshReg$(_c, \"ChatArea\");","map":{"version":3,"names":["useState","useEffect","toast","useDispatch","useSelector","createNewMessage","getAllMessage","hideLoader","showLoader","clearunreadMessagecount","store","EmojiPicker","moment","setAllChats","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatArea","socket","_s","_selectedChats$member","dispatch","selectedChats","user","allChats","state","userReducer","selectedUser","members","find","us","_id","message","setMessage","allMessages","setAllMessages","isTyping","setIsTyping","showEmojiPicker","setshowEmojiPicker","data","setData","sendMessage","image","trim","error","newMessage","chatId","sender","text","emit","map","m","read","createsAt","format","response","success","getMessages","formatTime","timestamp","now","formattedTimestamp","isSame","clone","subtract","ClearedUnreadMessages","chat","sendImage","e","file","target","files","reader","FileReader","readAsDataURL","onloadend","result","FormatName","firstname","lastname","fname","toUpperCase","slice","toLowerCase","lname","_selectedChats$lastMe","lastMessage","on","getState","prevmsg","updatedchat","unreadMessageCount","msg","setTimeout","msgController","document","getElementById","scrollTop","scrollHeight","children","className","fileName","_jsxFileName","lineNumber","columnNumber","id","isCurrentUserSender","style","justifyContent","src","alt","height","width","float","createdAt","color","mi","includes","position","bottom","right","zIndex","boxShadow","onEmojiClick","emoji","type","placeholder","value","onChange","htmlFor","display","accept","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Maestro_le6/Documents/BeeChatapp/client/src/pages/home/components/chatArea.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\"; \r\nimport toast from \"react-hot-toast\"; \r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { createNewMessage, getAllMessage} from '../../../apiCalls/message';\r\nimport { hideLoader, showLoader } from \"../../../redux/loaderSlice\"; \r\nimport { clearunreadMessagecount } from '../../../apiCalls/chat';\r\nimport store from '../../../redux/store';\r\n\r\nimport EmojiPicker from 'emoji-picker-react'\r\n\r\nimport moment from 'moment';\r\nimport { setAllChats } from \"../../../redux/usersSlice\";\r\n\r\n\r\nfunction ChatArea({socket}) {\r\n  const dispatch = useDispatch();\r\n  const { selectedChats, user, allChats } = useSelector(state => state.userReducer);\r\n  const selectedUser = selectedChats?.members?.find(us => us?._id !== user?._id);\r\n  const [message, setMessage] = useState('');\r\n  const [allMessages, setAllMessages] = useState([]);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [showEmojiPicker, setshowEmojiPicker] = useState(false);\r\n  const [ data, setData] = useState(null);\r\n\r\n  // Function to send a new message\r\n  /// and also images which was modified the image will be passed as parameter\r\n  const sendMessage = async (image) => {\r\n    if (!message.trim() && !image) {\r\n      toast.error(\"Message cannot be empty!\");\r\n      return;\r\n    }\r\n    try {\r\n      const newMessage = {\r\n        chatId: selectedChats?._id,\r\n        sender: user?._id,\r\n        text: message,\r\n        image: image\r\n      };\r\n  socket.emit('send-message', {\r\n    ...newMessage,\r\n       members: selectedChats.members.map(m => m._id),\r\n       read: false,\r\n       createsAt: moment().format('DD-MM-YYYY hh:mm:ss')\r\n\r\n      })\r\n      const response = await createNewMessage(newMessage);\r\n      if (response.success) {\r\n        setMessage('');\r\n        getMessages(); // Refresh messages after sending\r\n      } else {\r\n        toast.error(\"Failed to send message!\");\r\n      }\r\n    } catch (error) {\r\n      dispatch(hideLoader());\r\n      toast.error(error.message || \"An error occurred!\");\r\n    }\r\n  };\r\n\r\n  // Function to format timestamps\r\n  const formatTime = (timestamp) => {\r\n    const now = moment();\r\n    const formattedTimestamp = moment(timestamp);\r\n    if (formattedTimestamp.isSame(now, 'day')) {\r\n      return `Today ${formattedTimestamp.format('hh:mm A')}`;\r\n    } else if (formattedTimestamp.isSame(now.clone().subtract(1, 'day'), 'day')) {\r\n      return `Yesterday ${formattedTimestamp.format('hh:mm A')}`;\r\n    } else {\r\n      return formattedTimestamp.format('MMMM D, YYYY hh:mm A');\r\n    }\r\n  };\r\n\r\n  // Function to fetch all messages\r\n  const getMessages = async () => {\r\n    if (!selectedChats?._id) return;\r\n    try {\r\n      const response = await getAllMessage(selectedChats._id);\r\n\r\n      if (response.success) {\r\n        setAllMessages(response.data);\r\n      } else {\r\n        toast.error(\"Failed to fetch messages!\");\r\n      }\r\n    } catch (error) {\r\n      dispatch(hideLoader());\r\n      toast.error(error.message || \"An error occurred!\");\r\n    }\r\n  };\r\n\r\n\r\n///// Clearing the UnreadMessage Count\r\nconst ClearedUnreadMessages = async () => {\r\n  if (!selectedChats?._id) return;\r\n  try {\r\n      socket.emit('clear-unread-messages', {\r\n        chatId: selectedChats._id,\r\n        members: selectedChats.members.map(m => m._id)\r\n      })\r\n    const response = await clearunreadMessagecount(selectedChats._id);\r\n    if (response.success) {\r\n      allChats.map(chat => {\r\n        //// checking if the selectedChat matches the ID.\r\n        if(chat._id === selectedChats._id){\r\n          toast.success(response.message);\r\n          return response.data\r\n        }\r\n        return chat; /// just return the chat without changing anything\r\n      })\r\n    \r\n\r\n    } else {\r\n      toast.error(\"Failed to fetch messages!\");\r\n    }\r\n  } catch (error) {\r\n    toast.error(error.message || \"An error occurred!\");\r\n  }\r\n};\r\n //// To send Image\r\nconst sendImage = async (e) =>{\r\nconst file = e.target.files[0];\r\nconst reader = new FileReader(file);\r\n\r\nreader.readAsDataURL(file);\r\n\r\nreader.onloadend = async () =>{\r\n  sendMessage(reader.result);\r\n}\r\n} \r\n\r\n\r\n  // Format the selected user's full name\r\n  const FormatName = (user) => {\r\n    if (!user?.firstname || !user?.lastname) return \"Unknown User\";\r\n    const fname = user.firstname[0].toUpperCase() + user.firstname.slice(1).toLowerCase();\r\n    const lname = user.lastname[0].toUpperCase() + user.lastname.slice(1).toLowerCase();\r\n    return `${fname} ${lname}`;\r\n  };\r\n\r\n  // Effect to fetch messages when selectedChats changes\r\n  useEffect(() => {\r\n    getMessages();\r\n  if(selectedChats?.lastMessage?.sender && selectedChats.lastMessage.sender !== user._id){\r\n    ClearedUnreadMessages();\r\n  }// here we want the unread message cleared when the reciever recieves it.\r\n  //// listening to the receive-message event\r\n  socket.on('receive-message', (message) =>{\r\n    const selectedChats = store.getState().userReducer.selectedChats;\r\n    if(selectedChats?._id === message.chatId){\r\n      setAllMessages(prevmsg => [...prevmsg, message])\r\n    }\r\n    else if(selectedChats?._id === message.chatId && message.sender !== user._id){\r\n    clearunreadMessagecount();\r\n    }\r\n   socket.on('message-count-cleared', data =>{\r\n    const selectedChats = store.getState().userReducer.selectedChats;\r\n    const allChats = store.getState().userReducer.allChats;\r\n    /// checking of the selectedChat matches the incoming chat array stord in the data variable.\r\n    if(selectedChats._id === data.chatId){\r\n      //// updating the unread message count\r\n      const updatedchat = allChats.map(chat =>{\r\n        if(chat._id === data.chatId){\r\n        return {\r\n          ...chat,\r\n          unreadMessageCount: 0\r\n        }\r\n        }\r\n          return chat;\r\n      \r\n      })\r\n      \r\n     dispatch(setAllChats(updatedchat))\r\n      ////// Updating the read property in the message Object.\r\n       setAllMessages(prevmsg =>{\r\n        return prevmsg.map(msg => {\r\n                return { ...msg, read: true}\r\n        })\r\n       })\r\n\r\n\r\n    } \r\n   })\r\n  })\r\n\r\n    /// handling the started typing\r\n    socket.on('started-typing',(data)=>{\r\n      if(selectedChats._id === data.chatId && data.sender !== user._id){\r\n        setIsTyping(true);\r\n        setTimeout(()=>{\r\n          setIsTyping(false);\r\n        }, 3000)\r\n      }\r\n     })\r\n  }, [selectedChats]);\r\n/// creating an automatic scroll effect.\r\nuseEffect(() =>{\r\n  const msgController = document.getElementById('main-chat-area')\r\n        msgController.scrollTop = msgController.scrollHeight;\r\n}, [allMessages])\r\n\r\n  // Render the component\r\n  return (\r\n    <>\r\n      {selectedChats ? (\r\n        <div className=\"app-chat-area\">\r\n          <div className=\"app-chat-area-header\">\r\n            {FormatName(selectedUser)}\r\n          </div>\r\n          <div className=\"main-chat-area\" id=\"main-chat-area\">\r\n            {allMessages?.map(msg => {\r\n              const isCurrentUserSender = msg.sender === user?._id;\r\n              return (\r\n                <div \r\n                  key={msg._id} \r\n                  className=\"message-container\"\r\n                  style={isCurrentUserSender ? { justifyContent: 'end' } : { justifyContent: 'start' }}\r\n                >\r\n                  <div>\r\n                    <div className={isCurrentUserSender ? \"send-message\" : \"received-message\"}>\r\n                      <div>{msg.text}</div> {/*wrap it within a div*/}\r\n                    </div>\r\n                     {/*This code will enable users to send images*/}\r\n                      <div> {msg.image && <img src={msg.image} alt=\"image\" height='120' width='120'/>} </div>\r\n              \r\n                    <div \r\n                      className=\"message-timestamps\" \r\n                      style={isCurrentUserSender ? { float: 'right' } : { float: 'left' }}\r\n                    >\r\n                      {formatTime(msg.createdAt)} \r\n                      {isCurrentUserSender && msg.read && <i className=\"fa fa-check-circle\"\r\n                       aria-hidden=\"true\" \r\n                       style={{color: '#4796ff'}}>\r\n                        </i>}\r\n                    </div> \r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n            {/*Display a typing indicator*/}\r\n            {/*an additional code to display typing indicator to only when a chat is selected*/}\r\n                      <div className=\"typing-indicate\">{ isTyping && selectedChats?.members.map(mi => mi._id).\r\n                                                            includes(data?.sender) && <i>typing...</i>}</div> \r\n               {/*Display the Emojis here*/}\r\n            { \r\n              showEmojiPicker &&\r\n              <div className=\"send-message-wrapper\" style={{ position: 'absolute',\r\n                bottom: '60px', // Adjust height above input box\r\n                right: '80px',\r\n                zIndex: 1000,\r\n                boxShadow: '0 0 10px rgba(0,0,0,0.2)'}}> \r\n              <EmojiPicker onEmojiClick={(e) => setMessage(message + e.emoji)}/> \r\n          </div>\r\n            }  \r\n          <div className=\"send-message-div\">\r\n            <input \r\n              type=\"text\" \r\n              className=\"send-message-input\" \r\n              placeholder=\"Type a message\" \r\n              value={message}\r\n              onChange={(e) => {  setMessage(e.target.value)\r\n              socket.emit('user-typing', {\r\n                chatId: selectedChats._id,\r\n                members: selectedChats.members.map(m => m._id),\r\n                sender: user._id // we are storing the id of the curremt sender\r\n              })\r\n\r\n              }}\r\n            /> \r\n            {/*Enable users to be able to send message we use an i class*/}\r\n            <label htmlFor=\"file\">\r\n            <i className=\"fa fa-picture-o send-image-btn\"></i>\r\n             {/*Create an input that will not be visible to accept images\r\n            this input will not be seen\r\n            */}\r\n             <input type=\"file\"\r\n              id=\"file\"\r\n              style={{display: 'none'}}\r\n              accept=\"image/jpg,image/jpeg,image/png,image/gif,image/webp\"\r\n              onChange={sendImage}\r\n             />\r\n            </label>\r\n        \r\n             <button \r\n              className=\"fa fa-smile-o send-emoji-btn\" \r\n              aria-hidden=\"true\" \r\n              onClick={()=>{setshowEmojiPicker(!showEmojiPicker)}}\r\n            ></button>\r\n            <button \r\n              className=\"fa fa-paper-plane send-message-btn\" \r\n              aria-hidden=\"true\" \r\n              onClick={ ()=> sendMessage('')}\r\n            ></button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"no-chat-selected\">Please select a chat to start messaging.</div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ChatArea;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}