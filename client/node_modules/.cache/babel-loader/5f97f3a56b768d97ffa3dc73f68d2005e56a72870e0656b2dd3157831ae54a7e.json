{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Maestro_le6\\\\Documents\\\\BeeChatapp\\\\client\\\\src\\\\pages\\\\home\\\\components\\\\userslist.js\",\n  _s = $RefreshSig$();\nimport { useDispatch, useSelector } from \"react-redux\";\nimport toast from \"react-hot-toast\";\nimport { CreateChats } from '../../../apiCalls/chat';\nimport { hideLoader, showLoader } from \"../../../redux/loaderSlice\";\nimport { setAllChats, setselectedChats } from \"../../../redux/usersSlice\";\nimport moment from \"moment\";\nimport { useEffect } from \"react\";\nimport store from '../../../redux/store';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UsersList({\n  searchKey,\n  socket,\n  onlineUsers\n}) {\n  _s();\n  /// calling the allusers routes from the database.\n  const {\n    allUsers,\n    allChats,\n    user: currentUser,\n    selectedChats\n  } = useSelector(state => state.userReducer);\n  /// so inside the createchat function we will pass 2 arguements \n  //////1\n  const dispatch = useDispatch();\n  ///1. First\n  const StartNewChat = async searchedUserId => {\n    let response = null;\n    try {\n      dispatch(showLoader());\n      response = await CreateChats([currentUser._id, searchedUserId]); // This function expects an array\n      dispatch(hideLoader());\n      if (response.success) {\n        toast.success(response.message);\n        const newChat = response.data;\n\n        // Find the user to populate selectedChats\n        const selectedUser = allUsers.find(user => user._id === searchedUserId);\n        const updatedChat = [...allChats, newChat]; // Keep old chats and add new chat\n        dispatch(setAllChats(updatedChat));\n\n        // Set selectedChats with full data (chat and user details)\n        dispatch(setselectedChats({\n          ...newChat,\n          members: [...newChat.members, selectedUser]\n        }));\n      }\n    } catch (error) {\n      toast.error(response.message || \"An error occurred!\");\n      dispatch(hideLoader());\n    }\n  };\n\n  ////2.\n  const getLastMessageTimestamp = userId => {\n    const chat = allChats.find(chat => chat.members.map(my => my._id).includes(userId));\n    if (!chat || chat !== null && chat !== void 0 && chat.lastMessage) {\n      return \" \";\n    } else {\n      var _chat$lastMessage;\n      //// we will display You and the one who sent the last message.\n      return moment(chat === null || chat === void 0 ? void 0 : (_chat$lastMessage = chat.lastMessage) === null || _chat$lastMessage === void 0 ? void 0 : _chat$lastMessage.createdAt).format('hh:mm A');\n    }\n  };\n\n  ////3.\n  ///// Getting the last message\n  const GetLastMessage = userId => {\n    const chat = allChats.find(chat => chat.members.map(my => my._id).includes(userId));\n    if (!chat || !chat.lastMessage) {\n      return \"\";\n    } else {\n      var _chat$lastMessage2, _chat$lastMessage3, _chat$lastMessage3$te;\n      const msgPrefx = (chat === null || chat === void 0 ? void 0 : (_chat$lastMessage2 = chat.lastMessage) === null || _chat$lastMessage2 === void 0 ? void 0 : _chat$lastMessage2.sender) === currentUser._id ? \"You: \" : \"\";\n      return msgPrefx + (chat === null || chat === void 0 ? void 0 : (_chat$lastMessage3 = chat.lastMessage) === null || _chat$lastMessage3 === void 0 ? void 0 : (_chat$lastMessage3$te = _chat$lastMessage3.text) === null || _chat$lastMessage3$te === void 0 ? void 0 : _chat$lastMessage3$te.substring(0, 25));\n    }\n  };\n  const GetUnreadMessageCount = userId => {\n    const chat = allChats.find(chat => chat.members.map(m => m._id).includes(userId));\n    if (chat && chat.unReadMessageCount && chat.lastMessage.sender !== currentUser._id) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"unread-message-counter\",\n        children: [\" \", chat.unReadMessageCount, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 12\n      }, this);\n    } else {\n      return \"\";\n    }\n  };\n  /////4.\n  ///// remember to keep the selectedUserId\n  //// the selectedUserId is gotten based on the parametres given.\n  const openChat = selectedUserId => {\n    //// we want to find the chats of the two ids\n    const chat = allChats.find(chat => chat.members.map(m => m._id).includes(currentUser._id) && chat.members.map(m => m._id).includes(selectedUserId));\n    if (chat) {\n      dispatch(setselectedChats(chat));\n    }\n  };\n\n  /*\r\n  Now this fucntion will be used to prevent all users's div from\r\n  beign highlighted in the list.\r\n  */\n  const isSelectedChat = user => {\n    if (selectedChats && Array.isArray(selectedChats.members)) {\n      // Using map to loop only for the user_id of the selected users.\n      return selectedChats.members.map(sc => sc._id).includes(user._id);\n    }\n    return false;\n  };\n  function FormatName(user) {\n    let fname = user.firstname.at(0).toUpperCase() + user.firstname.slice(1).toLowerCase();\n    let lname = user.lastname.at(0).toUpperCase() + user.lastname.slice(1).toLowerCase();\n    return fname + ' ' + lname;\n  }\n\n  ///// Display the latest updated message sent to the current user who is selecetd\n  function getData() {\n    if (searchKey === \"\") {\n      return allChats;\n    } else {\n      return allUsers.filter(user => user.firstname.toLowerCase().includes(searchKey.toLowerCase()) || user.lastname.toLowerCase().includes(searchKey.toLowerCase())).map(user => {\n        // Find chat for this user\n        const chat = allChats.find(chat => chat.members.some(m => m._id === user._id));\n        return chat ? chat : {\n          members: [user]\n        }; // Return placeholder chat if none exists\n      });\n    }\n  }\n\n  //// when ever a new message is recieved while chatting with another user. unread message should be displayed\n  useEffect(() => {\n    socket.on('receive-message', message => {\n      const selectedChats = store.getState().userReducer.selectedChats || {};\n      let allChats = store.getState().userReducer.allChats;\n      if (selectedChats && (selectedChats === null || selectedChats === void 0 ? void 0 : selectedChats._id) !== (message === null || message === void 0 ? void 0 : message.chatId)) {\n        const updatedChat = allChats.map(chat => {\n          if ((chat === null || chat === void 0 ? void 0 : chat._id) === (message === null || message === void 0 ? void 0 : message.chatId)) {\n            return {\n              ...chat,\n              unReadMessageCount: ((chat === null || chat === void 0 ? void 0 : chat.unReadMessageCount) || 0) + 1,\n              lastMessage: message\n            };\n          } else {\n            return chat;\n          }\n        });\n        allChats = updatedChat;\n      }\n      //1. Find the Latest Chat\n      const latestChat = allChats.find(chat => chat._id === message.chatId);\n      //2. Get All Other chats\n      const OtherChats = allChats.filter(chat => chat._id !== message.chatId);\n      //3. Create a new array latest chat on top and then other chats below\n      allChats = [latestChat, ...OtherChats];\n      dispatch(setAllChats(allChats));\n    });\n  }, []);\n  return getData().map(obj => {\n    let user = obj;\n    if (obj.members) {\n      user = obj.members.find(mem => mem._id !== currentUser._id);\n    }\n    if (!user) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-search-filter\",\n      onClick: () => openChat(user._id),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: isSelectedChat(user) ? \"selected-user\" : \"filtered-user\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-user-display\",\n          children: [user.profilePic && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: user.profilePic,\n            alt: \"Profile Pic\",\n            className: \"user-profile-image\",\n            style: onlineUsers.includes(user._id) ? {\n              border: '#82e0aa 3px solid'\n            } : {}\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 17\n          }, this), !user.profilePic && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: isSelectedChat(user) ? \"user-selected-avatar\" : \"user-default-avatar\",\n            style: onlineUsers.includes(user._id) ? {\n              border: '#82e0aa 3px solid'\n            } : {},\n            children: user.firstname.charAt(0).toUpperCase() + user.lastname.charAt(0).toUpperCase()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"filter-user-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"user-display-name\",\n              children: FormatName(user)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 16\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"user-display-email\",\n              children: GetLastMessage(user._id) || user.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 20\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [GetUnreadMessageCount(user._id), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"last-message-timestamp\",\n              children: getLastMessageTimestamp(user._id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 16\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 17\n          }, this), !allChats.find(chats => chats.members.map(m => m._id).includes(user._id)) && /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"user-start-chat\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              class: \"user-start-chat-btn\",\n              onClick: () => {\n                StartNewChat(user._id);\n              },\n              children: \"Start chat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 16\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 8\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 3\n      }, this)\n    }, user._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 3\n    }, this);\n  });\n}\n_s(UsersList, \"EJeS36FF86w0jkj3P63ZkwOhGuU=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = UsersList;\nexport default UsersList;\nvar _c;\n$RefreshReg$(_c, \"UsersList\");","map":{"version":3,"names":["useDispatch","useSelector","toast","CreateChats","hideLoader","showLoader","setAllChats","setselectedChats","moment","useEffect","store","jsxDEV","_jsxDEV","UsersList","searchKey","socket","onlineUsers","_s","allUsers","allChats","user","currentUser","selectedChats","state","userReducer","dispatch","StartNewChat","searchedUserId","response","_id","success","message","newChat","data","selectedUser","find","updatedChat","members","error","getLastMessageTimestamp","userId","chat","map","my","includes","lastMessage","_chat$lastMessage","createdAt","format","GetLastMessage","_chat$lastMessage2","_chat$lastMessage3","_chat$lastMessage3$te","msgPrefx","sender","text","substring","GetUnreadMessageCount","m","unReadMessageCount","className","children","fileName","_jsxFileName","lineNumber","columnNumber","openChat","selectedUserId","isSelectedChat","Array","isArray","sc","FormatName","fname","firstname","at","toUpperCase","slice","toLowerCase","lname","lastname","getData","filter","some","on","getState","chatId","latestChat","OtherChats","obj","mem","onClick","profilePic","src","alt","style","border","charAt","class","email","chats","_c","$RefreshReg$"],"sources":["C:/Users/Maestro_le6/Documents/BeeChatapp/client/src/pages/home/components/userslist.js"],"sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\r\nimport toast from \"react-hot-toast\";\r\nimport { CreateChats } from '../../../apiCalls/chat'\r\nimport { hideLoader, showLoader } from \"../../../redux/loaderSlice\";\r\nimport { setAllChats, setselectedChats } from \"../../../redux/usersSlice\";\r\nimport moment  from \"moment\";\r\nimport { useEffect } from \"react\";\r\nimport store from '../../../redux/store'\r\n\r\n\r\nfunction UsersList({searchKey, socket, onlineUsers}){\r\n    /// calling the allusers routes from the database.\r\nconst { allUsers, allChats, user: currentUser, selectedChats} = useSelector(state => state.userReducer);\r\n/// so inside the createchat function we will pass 2 arguements \r\n//////1\r\nconst dispatch = useDispatch();\r\n///1. First\r\nconst StartNewChat = async (searchedUserId) => {\r\n  let response = null;\r\n  try {\r\n    dispatch(showLoader());\r\n    response = await CreateChats([currentUser._id, searchedUserId]); // This function expects an array\r\n    dispatch(hideLoader());\r\n\r\n    if (response.success) {\r\n      toast.success(response.message);\r\n      const newChat = response.data;\r\n\r\n      // Find the user to populate selectedChats\r\n      const selectedUser = allUsers.find(user => user._id === searchedUserId);\r\n\r\n      const updatedChat = [...allChats, newChat]; // Keep old chats and add new chat\r\n      dispatch(setAllChats(updatedChat));\r\n\r\n      // Set selectedChats with full data (chat and user details)\r\n      dispatch(setselectedChats({ ...newChat, members: [...newChat.members, selectedUser] }));\r\n    }\r\n  } catch (error) {\r\n    toast.error(response.message || \"An error occurred!\");\r\n    dispatch(hideLoader());\r\n  }\r\n};\r\n\r\n\r\n////2.\r\nconst getLastMessageTimestamp = (userId) =>{\r\n    const chat = allChats.find(chat => chat.members.map(my => my._id).includes(userId))\r\n    if(!chat || chat?.lastMessage){\r\n      return \" \";\r\n    }else{\r\n     //// we will display You and the one who sent the last message.\r\n        return moment(chat?.lastMessage?.createdAt).format('hh:mm A');\r\n    }\r\n}\r\n\r\n////3.\r\n///// Getting the last message\r\nconst GetLastMessage = (userId) => {\r\n    const chat = allChats.find(chat => chat.members.map(my => my._id).includes(userId));\r\n    if (!chat || !chat.lastMessage) {\r\n      return \"\";\r\n    } else {\r\n      const msgPrefx = chat?.lastMessage?.sender === currentUser._id ? \"You: \" : \"\";\r\n      return msgPrefx + chat?.lastMessage?.text?.substring(0, 25);\r\n    }\r\n  };\r\n  const GetUnreadMessageCount = (userId) =>{\r\n    const chat = allChats.find(chat => chat.members.map(m => m._id).includes(userId));\r\n    if(chat && chat.unReadMessageCount && chat.lastMessage.sender !== currentUser._id){\r\n    return <div className=\"unread-message-counter\"> {chat.unReadMessageCount} </div>\r\n    }\r\n  else{\r\n        return \"\";\r\n    }\r\n  }\r\n/////4.\r\n///// remember to keep the selectedUserId\r\n//// the selectedUserId is gotten based on the parametres given.\r\nconst openChat = (selectedUserId) =>{\r\n    //// we want to find the chats of the two ids\r\nconst chat = allChats.find(chat =>\r\n     chat.members.map(m => m._id).includes(currentUser._id)\r\n&& chat.members.map(m => m._id).includes(selectedUserId))\r\n\r\nif(chat){\r\n    dispatch(setselectedChats(chat))\r\n}                             \r\n}\r\n\r\n/*\r\nNow this fucntion will be used to prevent all users's div from\r\nbeign highlighted in the list.\r\n*/\r\nconst isSelectedChat = (user) => {\r\n    if (selectedChats && Array.isArray(selectedChats.members)) {\r\n      // Using map to loop only for the user_id of the selected users.\r\n      return selectedChats.members.map(sc => sc._id).includes(user._id);\r\n    }\r\n    return false;\r\n  };\r\n  \r\n\r\nfunction FormatName(user){\r\nlet fname = user.firstname.at(0).toUpperCase() + user.firstname.slice(1).toLowerCase();\r\nlet lname = user.lastname.at(0).toUpperCase() + user.lastname.slice(1).toLowerCase();\r\n\r\nreturn fname+ ' ' +lname\r\n} \r\n\r\n\r\n///// Display the latest updated message sent to the current user who is selecetd\r\nfunction getData() {\r\n  if (searchKey === \"\") {\r\n    return allChats;\r\n  } else {\r\n    return allUsers\r\n      .filter(user =>\r\n        user.firstname.toLowerCase().includes(searchKey.toLowerCase()) ||\r\n        user.lastname.toLowerCase().includes(searchKey.toLowerCase())\r\n      )\r\n      .map(user => {\r\n        // Find chat for this user\r\n        const chat = allChats.find(chat =>\r\n          chat.members.some(m => m._id === user._id)\r\n        );\r\n        return chat ? chat : { members: [user] }; // Return placeholder chat if none exists\r\n      });\r\n  }\r\n}\r\n\r\n//// when ever a new message is recieved while chatting with another user. unread message should be displayed\r\nuseEffect(() =>{\r\nsocket.on('receive-message', (message) =>{\r\nconst selectedChats = store.getState().userReducer.selectedChats || {}\r\nlet allChats = store.getState().userReducer.allChats \r\nif (selectedChats && selectedChats?._id !== message?.chatId) {\r\n  const updatedChat = allChats.map(chat => {\r\n    if(chat?._id === message?.chatId){ \r\n       return {\r\n        ...chat,\r\n        unReadMessageCount: (chat?.unReadMessageCount || 0 ) + 1,\r\n        lastMessage: message\r\n       }\r\n    }else{\r\n      return chat;\r\n      }\r\n  }); \r\n  allChats = updatedChat;\r\n  \r\n}\r\n//1. Find the Latest Chat\r\nconst latestChat = allChats.find(chat => chat._id === message.chatId)\r\n//2. Get All Other chats\r\nconst OtherChats = allChats.filter(chat => chat._id !== message.chatId)\r\n//3. Create a new array latest chat on top and then other chats below\r\nallChats = [latestChat, ...OtherChats];\r\ndispatch(setAllChats(allChats))\r\n})\r\n}, [])\r\n\r\n\r\n\r\nreturn(\r\n    \r\n  getData()\r\n    .map(obj => {\r\n      let user = obj;\r\n      if(obj.members){\r\n        user = obj.members.find(mem => mem._id !== currentUser._id)\r\n      }\r\n      if(!user) return null;\r\n        return (\r\n\r\n  <div className=\"user-search-filter\"\r\n   onClick={()=>openChat(user._id)} \r\n   key={user._id}>\r\n  <div className={ isSelectedChat(user) ? \"selected-user\": \"filtered-user\" }>\r\n       <div className=\"filter-user-display\">{user.profilePic && \r\n                <img src={user.profilePic} \r\n                 alt=\"Profile Pic\" \r\n                 className=\"user-profile-image\"\r\n                 style={onlineUsers.includes(user._id)? {border: '#82e0aa 3px solid'} : {} }\r\n       />}\r\n           {!user.profilePic && \r\n           <div className={ isSelectedChat(user)? \"user-selected-avatar\" : \"user-default-avatar\"}\r\n           style={onlineUsers.includes(user._id)? {border: '#82e0aa 3px solid'} : {} }\r\n\r\n          >\r\n               { user.firstname.charAt(0).toUpperCase() +\r\n                 user.lastname.charAt(0).toUpperCase()\r\n               }\r\n           </div>}\r\n           <div class=\"filter-user-details\">\r\n               <div class=\"user-display-name\">{FormatName(user)}</div>\r\n                   <div class=\"user-display-email\">{  GetLastMessage(user._id) || user.email }</div>\r\n               </div>\r\n                      \r\n\r\n                  {/*------------This div carries both get UnreadMessage Count and \r\n                    timestamps----------------------------------------------------\r\n                  -------------*/}   \r\n                <div> \r\n               { GetUnreadMessageCount(user._id) } \r\n               <div className=\"last-message-timestamp\">{getLastMessageTimestamp(user._id)}</div>\r\n              </div> \r\n               { \r\n                 !allChats.find(chats => chats.members.map(m => m._id).includes(user._id)) &&\r\n               <div class=\"user-start-chat\">\r\n                  <button class=\"user-start-chat-btn\" \r\n                  onClick={()=> {StartNewChat(user._id)}}\r\n                  >Start chat</button>\r\n               </div>}\r\n           </div>\r\n       </div>                        \r\n   </div>\r\n        )\r\n    })\r\n)\r\n}\r\nexport default UsersList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}